syntax = "proto3";

package com.lostVictories.api;

option java_multiple_files = true;

message Vector {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Quaternion {
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

enum Country {
    NEUTRAL = 0;
    GERMAN = 1;
    AMERICAN = 2;
}

enum Weapon {
    RIFLE = 0;
    MG42 = 1;
    MORTAR = 2;
    CANNON = 3;
    BAZOOKA = 4;
}

enum RankMessage {
    COLONEL = 0;
    LIEUTENANT = 1;
    CADET_CORPORAL = 2;
    PRIVATE = 3;
}

enum CharacterType {
    ARMORED_CAR = 0;
    ANTI_TANK_GUN = 1;
    SOLDIER = 2;
    HALF_TRACK = 3;
    PANZER4 = 4;
    AVATAR = 5;
    M4SHERMAN = 6;
}

message Action {
    enum ActionType {
        CROUCH = 0;
        IDLE = 1;
        MANUAL_CONTROL = 2;
        MOVE = 3;
        SETUP_WEAPON = 4;
        SHOOT = 5;
    }
    ActionType actionType = 1;
    string gear = 2;
    string steering = 3;
    int64 shootTime = 4;
    repeated Vector targets = 5;
}

enum SquadType {
    ANTI_TANK_GUN_SQUAD = 0;
    ARMORED_VEHICLE_SQUAD = 1;
    MORTAR_TEAM_SQUAD = 2;
    MG42_TEAM_SQUAD = 3;
    RIFLE_TEAM_SQUAD = 4;
}

message CharacterMessage {
    bytes id = 1;
    bytes userID = 2;
    Vector location = 3;
    Country country = 4;
    Weapon weapon = 5;
    RankMessage rank = 6;
    bytes commandingOfficer = 7;
    bytes boardedVehicle = 8;
    repeated bytes unitsUnderCommand = 9;
    repeated bytes passengers = 10;
    bytes checkoutClient = 11;
    int64 checkoutTime = 12;
    CharacterType type = 13;
    Vector orientation = 14;
    repeated Action actions = 15;
    map<string, string> objectives = 16;
    repeated bytes completedObjectives = 17;
    bool dead = 18;
    bool engineDamaged = 19;
    int64 timeOfDeath = 20;
    int64 version = 21;
    int32 killCount = 22;
    SquadType squadType = 23;
    int64 creationTime = 24;
    bool busy = 25;
    bool attacking = 26;
}

enum CaptureStatus{
    CAPTURING = 0;
    NONE = 1;
    CAPTURED = 2;
    DECAPTURING = 3;
}

message AchievementStatus{
    string achivementStatusText = 1;
    int32 achivementTotal = 2;
    int32 achivementCurrent = 3;
    int64 sentTime = 4;
}

message UnClaimedEquipmentMessage{
    bytes id = 1;
    int64 version = 2;
    Weapon weapon = 3;
    Vector location = 4;
    Vector rotation = 5;
}

message GameStatistics{
    int32 blueHouses = 1;
    int32 redHouses = 2;
    int32 blueVictoryPoints = 3;
    int32 redVictoryPoints = 4;
    int32 avatarRespawnEstimate = 5;
}

message HouseMessage{
    bytes id = 1;
    string type = 2;
    Vector location = 3;
    Quaternion rotation = 4;
    Country owner = 5;
    Country contestingOwner = 6;
    CaptureStatus captureStatus = 7;
    int64 statusChangeTime = 8;
}

message TreeMessage{
    bytes id = 1;
    Vector location = 2;
    string type = 3;
    bool standing = 4;
}

message TreeGroupMessage{
    bytes id = 1;
    Vector location = 2;
    repeated TreeMessage trees = 3;
}

message AddObjectiveRequest {
    bytes clientID = 1;
    bytes characterId = 2;
    bytes identity = 3;
    string objective = 4;
}

message BoardVehicleRequest{
    bytes clientID = 1;
    bytes vehicleID = 2;
    bytes characterID = 3;
}

message CharacterStatusResponse{
    CharacterMessage unit = 1;
}

message CheckoutScreenRequest{
    bytes clientID = 1;
    bytes avatar = 2;
}

message DeathNotificationRequest{
    bytes clientID = 1;
    bytes killer = 2;
    bytes victim = 3;
}

message DisembarkPassengersRequest{
    bytes clientID = 1;
    bytes vehicleID = 2;
}

message EquipmentCollectionRequest{
    bytes clientID = 1;
    bytes equipmentID = 2;
    bytes characterID = 3;
}

message EquipmentStatusResponse{
    UnClaimedEquipmentMessage unClaimedEquipment = 1;
}

message GameStatsResponse{
    repeated string messages = 1;
    GameStatistics gameStatistics = 2;
    AchievementStatus achivementStatus = 3;
}

message HouseStatusResponse{
    HouseMessage house = 1;
}

message PassengerDeathNotificationRequest{
    bytes clientID = 1;
    bytes killer = 2;
    bytes victim = 3;
}

message RelatedCharacterStatusResponse{
    CharacterMessage unit = 1;
}

message TreeStatusResponse{
    TreeGroupMessage treeGroup = 1;
}

message UpdateCharactersRequest{
    bytes clientID = 1;
    CharacterMessage character = 2;
    bytes avatar = 3;
    int64 clientStartTime = 4;
}

message LostVictoryMessage{
    CharacterStatusResponse characterStatusResponse = 1;
    RelatedCharacterStatusResponse relatedCharacterStatusResponse = 2;
    HouseStatusResponse houseStatusResponse = 3;
    TreeStatusResponse treeStatusResponse = 4;
    GameStatsResponse gameStatsResponse = 5;
    EquipmentStatusResponse equipmentStatusResponse = 6;
}

message PlayerDetails{
    string playerID = 1;
    string characterID = 2;
    Country country = 3;
}

service LostVictoriesServer {

    rpc checkoutSceen(CheckoutScreenRequest) returns (stream LostVictoryMessage);

    rpc updateLocalCharacters(stream UpdateCharactersRequest) returns (stream LostVictoryMessage);

    rpc deathNotification(DeathNotificationRequest) returns (LostVictoryMessage);

    rpc gunnerDeathNotification(PassengerDeathNotificationRequest) returns (LostVictoryMessage);

    rpc addObjective(AddObjectiveRequest) returns (LostVictoryMessage);

    rpc requestEquipmentCollection(EquipmentCollectionRequest) returns (LostVictoryMessage);

    rpc boardVehicle(BoardVehicleRequest) returns (LostVictoryMessage);

    rpc disembarkPassengers(DisembarkPassengersRequest) returns (LostVictoryMessage);

    rpc getPlayerDetails(PlayerDetails) returns (PlayerDetails);

}